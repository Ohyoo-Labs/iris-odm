class Schema{constructor(t){this.definition=t,this.indexes=[]}addIndex(t,e={}){return this.indexes.push({field:t,...e}),this}removeIndex(t){return this.indexes=this.indexes.filter((e=>e.field!==t)),this}validate(t){for(const e in this.definition){const i=t[e],n=this.definition[e].type;if(i&&n&&typeof i!==n)throw new Error(`Invalid type for field ${e}. Expected ${n}, got ${typeof i}`)}return!0}async validateAsync(t){for(const e in this.definition){const i=t[e],n=this.definition[e].type;if(i&&n&&typeof i!==n)throw new Error(`Invalid type for field ${e}. Expected ${n}, got ${typeof i}`)}return!0}static fromObject(t){return new Schema(t)}static fromArray(t){const e={};return t.forEach((t=>{e[t]={type:String}})),new Schema(e)}static fromString(t){const e={};return t.split(",").forEach((t=>{e[t]={type:String}})),new Schema(e)}toDocument(t){const e={...t};for(const t in this.definition)void 0===e[t]&&(e[t]=null);return e}toObject(t){const e={...t};for(const t in this.definition)null===e[t]&&(e[t]=void 0);return e}}export{Schema};