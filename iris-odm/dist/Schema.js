class Schema{constructor(t){this.definition=t,this.indexes=[]}addIndex(t,i={}){return this.indexes.push({field:t,...i}),this}removeIndex(t){return this.indexes=this.indexes.filter((i=>i.field!==t)),this}validate(t){for(const i in this.definition){const e=t[i],n=this.definition[i].type;if(e&&n&&typeof e!==n)throw new Error(`Invalid type for field ${i}. Expected ${n}, got ${typeof e}`)}}async validateAsync(t){for(const i in this.definition){const e=t[i],n=this.definition[i].type;if(e&&n&&typeof e!==n)throw new Error(`Invalid type for field ${i}. Expected ${n}, got ${typeof e}`)}}static fromObject(t){return new Schema(t)}static fromArray(t){const i={};return t.forEach((t=>{i[t]={type:String}})),new Schema(i)}static fromString(t){const i={};return t.split(",").forEach((t=>{i[t]={type:String}})),new Schema(i)}toDocument(t){const i={...t};for(const t in this.definition)void 0===i[t]&&(i[t]=null);return i}toObject(t){const i={...t};for(const t in this.definition)null===i[t]&&(i[t]=void 0);return i}}export{Schema};