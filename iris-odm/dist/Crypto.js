class Crypto{constructor(e=null){this.key=e}static async generateKey(e){const t=new TextEncoder,r=await crypto.subtle.importKey("raw",t.encode(e),{name:"PBKDF2"},!1,["deriveKey"]);return crypto.subtle.deriveKey({name:"PBKDF2",salt:t.encode("iris_salt"),iterations:1e3,hash:"SHA-256"},r,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}static async encrypt(e,t="hardcoded_password"){const r=crypto.getRandomValues(new Uint8Array(12)),a=await this.generateKey(t),n=new TextEncoder,c=await crypto.subtle.encrypt({name:"AES-GCM",iv:r},a,n.encode(JSON.stringify(e)));return{iv:Array.from(r),data:Array.from(new Uint8Array(c))}}static async decrypt(e,t="hardcoded_password"){const{iv:r,data:a}=e,n=await this.generateKey(t),c=await crypto.subtle.decrypt({name:"AES-GCM",iv:new Uint8Array(r)},n,new Uint8Array(a)),s=new TextDecoder;return JSON.parse(s.decode(c))}}export{Crypto};