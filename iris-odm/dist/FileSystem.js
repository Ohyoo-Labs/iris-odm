import{Crypto as crypto}from"./Crypto.js";class FileSystemManager{constructor(e,t={}){this.model=e,this.defaultFileName=t.defaultFileName||`${e.name}_backup`,this.supportInfo=this.checkCompatibility()}static isSupported(){return"showOpenFilePicker"in window&&"showSaveFilePicker"in window&&"FileSystemFileHandle"in window}checkCompatibility(){return{fullSupport:FileSystemManager.isSupported(),browserInfo:{isChrome:/Chrome/.test(navigator.userAgent),isFirefox:/Firefox/.test(navigator.userAgent),isSafari:/Safari/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent),isEdge:/Edge/.test(navigator.userAgent)},recommendedAction:this.getRecommendedAction()}}getRecommendedAction(){return FileSystemManager.isSupported()?null:"Su navegador no soporta completamente la API de Sistema de Archivos. Se utilizará un método de descarga alternativo."}async _fallbackExport(e){const t=await crypto.encrypt({modelName:this.model.name,timestamp:(new Date).toISOString(),data:e}),a=new Blob([JSON.stringify(t)],{type:"application/json"}),i=URL.createObjectURL(a),r=document.createElement("a");return r.href=i,r.download=`${this.defaultFileName}_${(new Date).toISOString().replace(/:/g,"-")}.irisdb`,document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(i),{success:!0,method:"fallback",recordsExported:e.length}}async exportToFile(){try{const e=await this.model.find();if(!FileSystemManager.isSupported())return await this._fallbackExport(e);const t={types:[{description:"Iris Database Backup",accept:{"application/json":[".irisdb"]}}],suggestedName:`${this.defaultFileName}_${(new Date).toISOString().replace(/:/g,"-")}.irisdb`},a=await window.showSaveFilePicker(t),i=await a.createWritable(),r={modelName:this.model.name,timestamp:(new Date).toISOString(),data:e},o=await crypto.encrypt(r);return await i.write(JSON.stringify(o)),await i.close(),{success:!0,recordsExported:e.length,fileName:a.name,method:"native"}}catch(e){if(!FileSystemManager.isSupported())try{const e=await this.model.find();return await this._fallbackExport(e)}catch(e){}return{success:!1,error:e.message,supportInfo:this.supportInfo}}}async _fallbackImport(){return new Promise(((e,t)=>{const a=document.createElement("input");a.type="file",a.accept=".json,.irisdb",a.onchange=async a=>{try{const t=a.target.files[0],i=await t.text(),r=await crypto.decrypt(JSON.parse(i));if(r.modelName!==this.model.name)throw new Error("El archivo no corresponde a este modelo de base de datos");if(await this._confirmClearExistingData()){const e=await this.model.find();for(const t of e)await this.model.delete(t[this.model.primary])}const o=[];for(const e of r.data){const t=await this.model.create(e,{castToScheme:!0});o.push(t)}e({success:!0,method:"fallback",recordsImported:o.length,timestamp:r.timestamp})}catch(e){t({success:!1,error:e.message})}},document.body.appendChild(a)}))}async importFromFile(){try{if(!FileSystemManager.isSupported())return await this._fallbackImport();const[e]=await window.showOpenFilePicker({types:[{description:"Iris Database Backup",accept:{"application/json":[".irisdb"]}}],multiple:!1}),t=await e.getFile(),a=await t.text(),i=await crypto.decrypt(JSON.parse(a));if(i.modelName!==this.model.name)throw new Error("El archivo no corresponde a este modelo de base de datos");if(await this._confirmClearExistingData()){const e=await this.model.find();for(const t of e)await this.model.delete(t.id)}const r=[];for(const e of i.data){const t=await this.model.create(e);r.push(t)}return{success:!0,recordsImported:r.length,fileName:e.name,timestamp:i.timestamp,method:"native"}}catch(e){if(!FileSystemManager.isSupported())try{return await this._fallbackImport()}catch(e){}return{success:!1,error:e.message,supportInfo:this.supportInfo}}}async _confirmClearExistingData(){return new Promise((e=>{e(confirm("¿Desea eliminar los datos existentes antes de importar?"))}))}setupAutoBackup(e=864e5){return setInterval((async()=>{try{await this.exportToFile()}catch(e){}}),e)}}export{FileSystemManager};